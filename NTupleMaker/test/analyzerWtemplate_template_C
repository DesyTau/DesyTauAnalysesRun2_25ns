#define analyzer_cxx
#include "analyzer.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
//#include "plots.h"
#include <cmath>
#include <sstream>
#include <iomanip>
#include "TChain.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TLegend.h"
#include "TROOT.h"
#include "TFrame.h"
#include "TGaxis.h"
#include "TStyle.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include "TList.h"
#include <string>
#include "TObject.h"
#include "TBranch.h"
#include <functional>
#include "TAxis.h"
#include "TChain.h"
#include "TMath.h"
#include "Riostream.h"
#include <iostream>
#include <fstream>




using namespace std;



void analyzer::Loop(){


	if (fChain == 0) return;


	CutList.clear();
	CutList.push_back("No cut");
	CutList.push_back("No cut after PU");
	CutList.push_back("mu-tau");
	CutList.push_back("2nd lepV");
	CutList.push_back("3rd lepV");
	CutList.push_back("Trigger SF");
	CutList.push_back("Lepton SF");

	CutList.push_back("Tau-id");
	CutList.push_back("TauFakeRate");
//	CutList.push_back("Iso lt 0.5");
	CutList.push_back("topPtRwgt");
	CutList.push_back("TTJets norm");
	CutList.push_back("WJets norm");
	CutList.push_back("MT window");
	CutList.push_back("Jets lt 1 ");
	CutList.push_back("0 btag");
	CutList.push_back("dR lt 3.5");
	CutList.push_back("MET gt 30");
	CutList.push_back("MET gt 40");
//	CutList.push_back("MET gt 50");
//	CutList.push_back("tau pT gt 50");

	//ChiMass = CHIMASSS;
	ChiMass = 0.;
	//cout<<" THE MASS IS ========================= "<<ChiMass<<endl;

	 int CutNumb = int(CutList.size());
         int iCFCounter[CutNumb];
	 double CFCounter[CutNumb];
	 for (int i=0;i < CutNumb; i++){
                        CFCounter[i] = 0;
			CFCounter_[i] = 0;
         	        iCFCounter[i] = 0;
        }
	fChain->GetEntry(0);  
	string old = datasetName->c_str();
	int counter = 0;
		
	//char hist_[100];
	bool isData = false;
	bool isTT = false;
	bool isSignal = false;
	bool cut_btag = true;
	
	bool t = true;
	bool f = false;
	bool InvertLeptonIso = LEPTONHERE;
	//bool HighInvertLeptonIso = HIGHISO;
	string Sign = "SIGNHERE";
	
	bool pfmet_JetEn = IS_PFMET_JETEN;
	bool EnUp = IS_PFMET_UP;
	bool pfmet_usual = IS_PFMET_USUAL;

	cout<<"pfmet_usual  "<<pfmet_usual<<endl;
	cout<<"pfmet_JetEn  "<<pfmet_JetEn<<endl;
	cout<<"EnUp  "<<EnUp<<endl;


	string cut = to_string(t);
	cout <<"  "<<cut.c_str()<<endl;
	char plots_[100];
	string data = "Single";
	string tt = "TT_TuneCUETP8M1_13TeV-powheg-pythia8";
	string signal = "stau";
	if (string::npos != old.find(data)) isData= true;
	if (string::npos != old.find(signal)) isSignal= true;
	if (string::npos != old.find(tt)) isTT= true;
	
	if (isSignal) cout<<" YOU HAVE FOUND ITTTTTTTTT "<<endl;
	if (isData) cout<<" YOU HAVE FOUND a DATA "<<endl;

	string channel = "CHANNELHERE";

	TString inputRootFile = "/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/CMSSW_8_0_12/src/DesyTauAnalyses/NTupleMaker/data/HIP_mediumID.root";
	TFile * fileInHIP = new TFile(inputRootFile, "read");

TGraphAsymmErrors * TGr_hip;
TGr_hip = new TGraphAsymmErrors();
TGr_hip = (TGraphAsymmErrors*)fileInHIP->Get("ratio_eta");

/*
TIter nextkey (fileInHIP->GetListOfKeys ());
TKey *key = 0;
key = (TKey *) nextkey ();
TObject *obj = key->ReadObj ();
TH2D *histo = (TH2D*) obj;
*/

	TFile * filein = new TFile("/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/CMSSW_8_0_12/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE/FILEIN","read");


	TH1D * histW = (TH1D*)filein->Get("mutau/histWeightsH");
	TH1D * histTop ;
	if (isTT) histTop = (TH1D*)filein->Get("mutau/histTopPt");
	
//	TH1D * hxsecW = (TH1D*)filein->Get("mutau/xsec");
	TH1D * CutFlow = (TH1D*)filein->Get("mutau/CutFlowUnW");
	TFile * file = new TFile("plots.root","recreate");

	//cout<<"  "<<old<<"  "<<datasetName->c_str()<<"  "<<hist_<<"  "<<CutFlow->GetName()<<"  "<<CutFlow->GetBinContent(1)<<endl;
		
	//filein->ls();
	string Channel = "mutau";
	file->mkdir(Channel.c_str());
	file->cd(Channel.c_str());
	//histW->Write();
	//CutFlow->Draw();
	float top_w = 1.;
	Long64_t nentries = fChain->GetEntriesFast();
	SetupHists(CutNumb);

	Long64_t nbytes = 0, nb = 0;
/*	if (isTT){
	TH1D * histTopPt = new TH1D("histTopPt","",1,0,0);
		for (Long64_t jen=0; jen<nentries;jen++) {

			Long64_t ientry = LoadTree(jen);
			nb = fChain->GetEntry(jen);  
//			cout<<"  "<<top_weight<<endl;
			histTopPt->Fill(0.,top_weight);
		}	
		

			top_w = histTopPt->GetMean();
	cout<<" there is a TTbar sample and the Mean weight from topPt is "<<top_w<<"  "<<histTopPt->GetSumOfWeights()<<endl;
	}
*/



	for (Long64_t jentry=0; jentry<nentries;jentry++) {
		Long64_t ientry = LoadTree(jentry);
		nb = fChain->GetEntry(jentry);   nbytes += nb;
		float all_weights = 1.;

		if ( jentry%100000 ==0 ) cout<<" working for you...processed " <<jentry<<" events from "<<nentries<<" dataset "<<datasetName->c_str()<<" weight "<<all_weights<< endl;


		if (isData && met_flag<0.5) continue;	
		//if (met_flag<0.5) continue;	

		JetsMV.clear();
		MuMV.clear();
		ElMV.clear();
		TauMV.clear();
		btag_index.clear();

			JetsV.SetPxPyPzE(0.,0.,0.,0.);
			MuV.SetPxPyPzE(0.,0.,0.,0.);
			ElV.SetPxPyPzE(0.,0.,0.,0.);
			TauV.SetPxPyPzE(0.,0.,0.,0.);


	float met = 0.;
		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met = sqrt(met_ex*met_ex + met_ey*met_ey);  
/*
	if (pfmet_usual)
		{
		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met = sqrt(met_ex*met_ex + met_ey*met_ey);  
		}
*/

	if (pfmet_JetEn && EnUp && !pfmet_usual)
		{
		METV.SetPx(met_ex_JetEnUp);
		METV.SetPy(met_ey_JetEnUp);
		met = sqrt(met_ex_JetEnUp*met_ex_JetEnUp + met_ey_JetEnUp*met_ey_JetEnUp);      
		}

	if (pfmet_JetEn && !EnUp && !pfmet_usual)
		{
		METV.SetPy(met_ey_JetEnDown);
		met = sqrt(met_ex_JetEnDown*met_ex_JetEnDown + met_ey_JetEnDown*met_ey_JetEnDown);     
		}

	if (!pfmet_JetEn && EnUp && !pfmet_usual)
		{
		METV.SetPx(met_ex_UnclusteredEnUp);
		METV.SetPy(met_ey_UnclusteredEnUp);
		met = sqrt(met_ex_UnclusteredEnUp*met_ex_UnclusteredEnUp + met_ey_UnclusteredEnUp*met_ey_UnclusteredEnUp);     
		}

	if (!pfmet_JetEn && !EnUp && !pfmet_usual)
		{
		METV.SetPx(met_ex_UnclusteredEnDown);
		METV.SetPy(met_ey_UnclusteredEnDown);
		met = sqrt(met_ex_UnclusteredEnDown*met_ex_UnclusteredEnDown + met_ey_UnclusteredEnDown*met_ey_UnclusteredEnDown);
		}


		//cout<<" size "<<JetsMV.size()<<"  "<<gen_weight<<"  "<<jentry<<"  "<<nentries<<"  "<<int(mu_count)<<"  "<<int(muon_index)<<endl;

		if (abs(mu_count) > 8 || abs(el_count) > 8 || abs(ta_count) >8) continue;

if(muon_index>-1 && muon_index<8)			MuV.SetPtEtaPhiM(mu_pt[muon_index], mu_eta[muon_index], mu_phi[muon_index], muonMass);
if(electron_index>-1 && electron_index<8)		ElV.SetPtEtaPhiM(el_pt[electron_index], el_eta[electron_index], el_phi[electron_index],electronMass);
if (taus_index>-1 && taus_index<8)			TauV.SetPtEtaPhiM(ta_pt[taus_index], ta_eta[taus_index], ta_phi[taus_index], tauMass);

//		cout<<" e " <<jentry<<" from "<<nentries<<"  weights "<<all_weights<<" same ? "<< gen_weight*trig_weight*pu_weight*top_weight*LSF_weight*TFR_weight <<" PU "<<pu_weight<<" top "<<top_weight<<" LSF "<<LSF_weight<<" TFR "<<TFR_weight<<" gen "<<gen_weight<<" trig  "<<trig_weight<<endl;
		int iCut = 1;

		all_weights = pu_weight * gen_weight ;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
		if (mu_relIso[0] > 0.15 && !InvertLeptonIso) continue;
		if (mu_relIso[0] < 0.15 && InvertLeptonIso) continue;
		
		//if (mu_relIso[0] > 0.5 && InvertLeptonIso && HighInvertLeptonIso) continue;
		if (mu_relIso[0] > 0.3) continue;

		if ( fabs(mu_dz[muon_index]) > 0.2) continue;
		if ( fabs(mu_dxy[muon_index]) > 0.045) continue;


		if ( fabs(mu_charge[muon_index]) !=1 ) continue;
		if ( fabs(ta_charge[taus_index]) !=1 ) continue;

		float charge_ =mu_charge[muon_index]  * ta_charge[taus_index];

		if ( charge_ < 0. && Sign == "SS") continue;
		if ( charge_ > 0. && Sign == "OS") continue;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		if (event_secondLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (event_thirdLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
		all_weights *= trig_weight;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		all_weights *= LSF_weight;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		double ptTau1 = (double)ta_pt[taus_index];
		double etaTau1 = (double)ta_eta[taus_index];
		//ChargedIso CutBased MVA

		//double hip  = HIP_SF(mu_pt[muon_index],mu_eta[muon_index]);
		//double ptN = histo->GetXaxis()->FindBin(mu_pt[muon_index]);
		//double etaN = histo->GetYaxis()->FindBin(fabs(mu_eta[muon_index]));
		//int binNumber = TGr_hip->GetXaxis()->FindBin(mu_eta[muon_index]);
		double hip = TGr_hip->Eval(float(mu_eta[muon_index]));
		all_weights *= hip;



		//string tID="CutBased_Medium";
		string tID="MVA_Tight";
		double tauId = TauiD(channel,tID);
		if (genTauMatched>0.5 && genLeptonMatched < 0.5 && !isData) all_weights *= tauId;
		
                FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		string WP = "MVA";
		double tfr  = TauFakeRate(ptTau1,etaTau1,channel,WP);
		if (genTauMatched<0.5 && genLeptonMatched < 0.5 && !isData) all_weights *= tfr;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;





		all_weights *= top_weight;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		 TLorentzVector DiL = MuV  ;
     		double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), METV.Px(),  METV.Py() );
         	double MT = TMath::Sqrt(2*DiL.Pt()*METV.Pt()*(1-TMath::Cos(dPhi)));
	     	
		if (MT < 60.) continue;
		if (MT > 120. ) continue;
		if (MT < 20.) continue;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (njets!=0) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		if (nbtag!=0) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

                double Dr=deltaR(mu_eta[muon_index],mu_phi[muon_index],
                                        ta_eta[taus_index],ta_phi[taus_index]);
		if (Dr>3.5) continue;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
                 
	
		if (met<30.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (met<40.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		continue;

		if (met<50.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		if (ta_pt[taus_index] < 50. ) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		

	
  }





	float Lumi = 12890.;

	if (isData) Lumi = 1.;

		 for(int ci = 0; ci < CutNumb; ci++)
                        {
                                // tfile << CutList[ci]<<"\t & \t"
                                //          << CFCounter[ci]  <<"\t & \t"<< statUnc[ci] <<"\t & \t"<< iCFCounter[ci] << endl;
                                		CutFlowUnW->SetBinContent(1+ci,0);
                        if (CutNumb < 2)       CutFlowUnW->SetBinContent(1+ci,CFCounter_[ci]);
                           else  
 					CutFlowUnW->SetBinContent(1+ci,float(CFCounter[ci]) );
				

					//cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<" prediction for Lumi " <<Lumi<<"  "<<float (CutFlowUnW->GetBinContent(1+ci))*hxsecW->GetMean()*Lumi/histW->GetSumOfWeights()<<endl;			
					cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<endl;			

}


			cout<<"  end from TH1D "<<endl;

		//hcount->Draw();
		CutFlowUnW->Write();
		histW->Write();
	if (isTT) histTop->Write();
	//	hxsecW->Write();
		file->Write();
		file->Close();
		cout<<" Failed events  "<<counter<<endl;
	}
/////////////////////////////////////////////

