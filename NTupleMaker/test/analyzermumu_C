#define analyzer_cxx
#include "analyzer.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
//#include "plots.h"
#include <cmath>
#include <sstream>
#include <iomanip>
#include "TChain.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TLegend.h"
#include "TROOT.h"
#include "TFrame.h"
#include "TGaxis.h"
#include "TStyle.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include "TList.h"
#include <string>
#include "TObject.h"
#include "TBranch.h"
#include <functional>
#include "TAxis.h"
#include "TChain.h"
#include "TMath.h"
#include "Riostream.h"
#include <iostream>
#include <fstream>




using namespace std;



void analyzer::Loop(){


	if (fChain == 0) return;


	CutList.clear();
	CutList.push_back("No cut");
	CutList.push_back("No cut after PU");
	CutList.push_back("mu-mu OS");
	CutList.push_back("3rd lepV");
	CutList.push_back("Trigger SF");
	CutList.push_back("Lepton SF");
	CutList.push_back("topPtRwgt");
	CutList.push_back("MET recoil");
	CutList.push_back("ZpT correction");
	CutList.push_back("njets < 2");
	CutList.push_back("0 btag");
	CutList.push_back("Zmass window");
	CutList.push_back("LetpsPt > 30");
	CutList.push_back("LetpsPt > 35");
	CutList.push_back("LetpsPt > 40");

	ChiMass = 0.;
	//cout<<" THE MASS IS ========================= "<<ChiMass<<endl;

	 int CutNumb = int(CutList.size());
         int iCFCounter[CutNumb];
	 double CFCounter[CutNumb];
	 for (int i=0;i < CutNumb; i++){
                        CFCounter[i] = 0;
			CFCounter_[i] = 0;
         	        iCFCounter[i] = 0;
        }
	fChain->GetEntry(0);  
	string old = datasetName->c_str();
	int counter = 0;
		
	//char hist_[100];
	bool isData = false;
	bool isTT = false;
	bool isWJ = false;
	bool isDY = false;
	bool isDYhigh = false;
	bool isDYlow = false;
	bool isDYNJ = false;
	bool isWNJ = false;
	bool isNJ = false;
	bool isSignal = false;
	bool cut_btag = true;
	
	bool t = true;
	bool f = false;
	bool InvertLeptonIso = LEPTONHERE;
	//bool HighInvertLeptonIso = HIGHISO;
	string Sign = "SIGNHERE";
	
	string systematic="SYSTEMATICHERE";

	string cut = to_string(t);
	cout <<"  "<<cut.c_str()<<endl;
	char plots_[100];
	string data = "Single";
	string tt = "TT_TuneCUETP8M1_13TeV-powheg-pythia8";
	string wj = "WJetsToLNu";
	string wj1 = "W1JetsToLNu";
	string wj2 = "W2JetsToLNu";
	string wj3 = "W3JetsToLNu";
	string wj4 = "W4JetsToLNu";
	string dyj = "DYJetsToLL";
	string dyjhigh = "DYJetsToLL_M-50";
	string dyjlow = "DYJetsToLL_M-5to";
	string dyjlow2 = "DYJetsToLL_M-10to";
	string dyj1 = "DY1JetsToLL";
	string dyj2 = "DY2JetsToLL";
	string dyj3 = "DY3JetsToLL";
	string dyj4 = "DY4JetsToLL";
	string signal = "stau";
	string signalC1 = "C1";
	if (string::npos != old.find(data)) isData= true;
	if (string::npos != old.find(signal)) isSignal= true;
	if (string::npos != old.find(signalC1)) isSignal= true;
	if (string::npos != old.find(tt)) isTT= true;
	if (string::npos != old.find(wj)) isWJ= true;
	if (string::npos != old.find(dyj)) isDY= true;
	if (string::npos != old.find(dyjhigh)) isDYhigh= true;
	if (string::npos != old.find(dyjlow) || string::npos != old.find(dyjlow2)) isDYlow= true;
	if (string::npos != old.find(dyj1) || string::npos != old.find(dyj2) || string::npos != old.find(dyj3) || string::npos != old.find(dyj4)) isDYNJ = true;
	if (string::npos != old.find(wj1) || string::npos != old.find(wj2) || string::npos != old.find(wj3) || string::npos != old.find(wj4)) isWNJ= true;
	isNJ = isDYNJ && isWNJ;

	if (isSignal) cout<<" YOU HAVE FOUND ITTTTTTTTT "<<endl;
	if (isData) cout<<" YOU HAVE FOUND a DATA "<<endl;

	string channel = "Î";

	TString inputRootFile = "/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/CMSSW_8_0_12/src/DesyTauAnalyses/NTupleMaker/data/HIP_mediumID.root";
	TFile * fileInHIP = new TFile(inputRootFile, "read");

TGraphAsymmErrors * TGr_hip;
TGr_hip = new TGraphAsymmErrors();
TGr_hip = (TGraphAsymmErrors*)fileInHIP->Get("ratio_eta");


	TString inputRootFile2 = "/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/StauAnalysis/CMSSW_8_0_20/src/DesyTauAnalyses/NTupleMaker/data/sf_mu_medium.root";

	TFile * fileInFast = new TFile(inputRootFile2, "read");


TIter nextkey (fileInFast->GetListOfKeys ());
TKey *key = 0;
key = (TKey *) nextkey ();
TObject *obj = key->ReadObj ();
TH2D *histo = (TH2D*) obj;



	TFile * filein = new TFile("/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/StauAnalysis/CMSSW_8_0_20/src/DesyTauAnalyses/NTupleMaker/test/Î/FILEIN","read");

	TH1D * histW = (TH1D*)filein->Get("mumu/histWeightsH");
	TH1D * histTop ;
	if (isTT) histTop = (TH1D*)filein->Get("mumu/histTopPt");
	
//	TH1D * hxsecW = (TH1D*)filein->Get("mumu/xsec");
	TH1D * CutFlow = (TH1D*)filein->Get("mumu/CutFlowUnW");
	TFile * file = new TFile("plots.root","recreate");

	//cout<<"  "<<old<<"  "<<datasetName->c_str()<<"  "<<hist_<<"  "<<CutFlow->GetName()<<"  "<<CutFlow->GetBinContent(1)<<endl;
		
	string Channel = "mumu";
	file->mkdir(Channel.c_str());
	file->cd(Channel.c_str());
	float top_w = 1.;
	Long64_t nentries = fChain->GetEntriesFast();
	SetupHists(CutNumb);

	Long64_t nbytes = 0, nb = 0;


	for (Long64_t jentry=0; jentry<nentries;jentry++) {
		Long64_t ientry = LoadTree(jentry);
		nb = fChain->GetEntry(jentry);   nbytes += nb;
		float all_weights = 1.;
	
if (muon_index_1 <0 || muon_index_2 <0) continue;

		float charge_ =mu_charge[muon_index_1]  * mu_charge[muon_index_2];

		if ( charge_ < 0. && Sign == "SS") continue;
		if ( charge_ > 0. && Sign == "OS") continue;
		if ( jentry%100000 ==0 ) cout<<" working for you...processed " <<jentry<<" events from "<<nentries<<" dataset "<<datasetName->c_str()<<" weight "<<all_weights<< endl;

		if (isWJ && (npartons>0 && npartons<5)) continue;

		if ( isDYhigh && (npartons>0 && npartons<5)) continue;

		if (isData && met_flag<0.5) continue;	


		JetsMV.clear();
		MuMV.clear();
		ElMV.clear();
		TauMV.clear();
		btag_index.clear();

			JetsV.SetPxPyPzE(0.,0.,0.,0.);
			MuV.SetPxPyPzE(0.,0.,0.,0.);
			ElV.SetPxPyPzE(0.,0.,0.,0.);
			TauV.SetPxPyPzE(0.,0.,0.,0.);

	for (int nj=0;nj<njets;++nj) {
	int jet_index = jets_cleaned[nj];
	JetsV.SetPxPyPzE(0.,0.,0.,0.);
	JetsV.SetPxPyPzE(jet_px[jet_index], jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
	JetsMV.push_back(JetsV);
	}

	float met = -1;

		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met= sqrt(met_ex*met_ex + met_ey*met_ey);  

	if (systematic =="nominal")
		{
		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met = sqrt(met_ex*met_ex + met_ey*met_ey);  
		}

//JetEnUp JetEnDown UnclEnUp UnclEnDown
	if (systematic =="JetEnUp")
		{
		METV.SetPx(met_ex_JetEnUp);
		METV.SetPy(met_ey_JetEnUp);
		met = sqrt(met_ex_JetEnUp*met_ex_JetEnUp + met_ey_JetEnUp*met_ey_JetEnUp);      
		}

	if (systematic =="JetEnDown")
		{
		METV.SetPx(met_ex_JetEnDown);
		METV.SetPy(met_ey_JetEnDown);
		met = sqrt(met_ex_JetEnDown*met_ex_JetEnDown + met_ey_JetEnDown*met_ey_JetEnDown);     
		}

	if (systematic =="UnclEnUp")
		{
		METV.SetPx(met_ex_UnclusteredEnUp);
		METV.SetPy(met_ey_UnclusteredEnUp);
		met = sqrt(met_ex_UnclusteredEnUp*met_ex_UnclusteredEnUp + met_ey_UnclusteredEnUp*met_ey_UnclusteredEnUp);     
		}

	if (systematic =="UnclEnDown")
		{
		METV.SetPx(met_ex_UnclusteredEnDown);
		METV.SetPy(met_ey_UnclusteredEnDown);
		met = sqrt(met_ex_UnclusteredEnDown*met_ex_UnclusteredEnDown + met_ey_UnclusteredEnDown*met_ey_UnclusteredEnDown);
		}



if(muon_index_1>-1 )			LeptV1.SetPtEtaPhiM(mu_pt[muon_index_1], mu_eta[muon_index_1], mu_phi[muon_index_1], muonMass);
if(muon_index_2>-1 )			LeptV2.SetPtEtaPhiM(mu_pt[muon_index_2], mu_eta[muon_index_2], mu_phi[muon_index_2], muonMass);

		int iCut = 1;
		all_weights = 1.;
		if (!isData) all_weights = pu_weight * gen_weight ;

		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
		//if (mu_relIso[0] > 0.15 && !InvertLeptonIso) continue;
		//if (mu_relIso[0] < 0.15 && InvertLeptonIso) continue;
		
		if (mu_relIso[0] > 0.15) continue;
		if (mu_relIso[1] > 0.15) continue;

		if ( fabs(mu_dz[muon_index_1]) >0.2 ) continue;
		if ( fabs(mu_dxy[muon_index_1]) >0.045) continue;
		if ( fabs(mu_dz[muon_index_2]) >0.2 ) continue;
		if ( fabs(mu_dxy[muon_index_2]) >0.045) continue;

		if ( fabs(mu_charge[muon_index_1]) !=1 ) continue;
		if ( fabs(mu_charge[muon_index_2]) !=1 ) continue;


		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (event_thirdLeptonVeto >0.5) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
		//1 -  (1-EffFromData1) * (1 -EffFromData2);
		float trigw = 1 -  (1-trig_weight_1) * (1 -trig_weight_2);
		if (!isData) all_weights *= trigw ;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (!isData) all_weights *= LSF_weight;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		double ptN=0;double etaN=0;double FastSF=0;

		ptN = histo->GetXaxis()->FindBin(mu_pt[muon_index_1]);
		etaN = histo->GetYaxis()->FindBin(fabs(mu_eta[muon_index_1]));
		FastSF = histo->GetBinContent(ptN,etaN);
	
	if (isSignal) all_weights *= FastSF;
/*		//int binNumber = TGr_hip->GetXaxis()->FindBin(mu_eta[muon_index_1]);
		double hip = TGr_hip->Eval(float(mu_eta[muon_index_1]));
		double hip2 = TGr_hip->Eval(float(mu_eta[muon_index_2]));
//		all_weights *= hip*hip2;
//		cout<<"  "<<hip<<"  "<<ptN<<"  "<<etaN<<"  "<<mu_pt[muon_index_1]<<"  "<<endl;

*/

		all_weights *= top_weight;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		if (isWJ || isDY || isWNJ || isDYNJ) {
		
		METV.SetPx(0.);
		METV.SetPy(0.);
		METV.SetPx(met_ex_recoil);
		METV.SetPy(met_ey_recoil);
		met=sqrt(met_ex_recoil*met_ex_recoil+met_ey_recoil*met_ey_recoil);
		}

		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (isDY || isDYNJ) all_weights *=zptmassweight;
		

		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if (njets>1) continue;

		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (nbtag!=0) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		 TLorentzVector DiL = LeptV1 + LeptV2  ;

		if (DiL.M()>105) continue;
		if (DiL.M()<75) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;



		if (LeptV1.Pt()<30 || LeptV2.Pt()<30) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (LeptV1.Pt()<35 || LeptV2.Pt()<35) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (LeptV1.Pt()<40 || LeptV2.Pt()<40) continue;
		FillHistsDiL(iCut, all_weights, LeptV2, LeptV1, JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index_1,muon_index_2);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

	
  }


	float Lumi = 36600.;

	if (isData) Lumi = 1.;
		 for(int ci = 0; ci < CutNumb; ci++)
                        {
                                // tfile << CutList[ci]<<"\t & \t"
                                //          << CFCounter[ci]  <<"\t & \t"<< statUnc[ci] <<"\t & \t"<< iCFCounter[ci] << endl;
                                		CutFlowUnW->SetBinContent(1+ci,0);
                        if (CutNumb < 2)       CutFlowUnW->SetBinContent(1+ci,CFCounter_[ci]);
                           else  
 					CutFlowUnW->SetBinContent(1+ci,float(CFCounter[ci]) );
				

					//cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<" prediction for Lumi " <<Lumi<<"  "<<float (CutFlowUnW->GetBinContent(1+ci))*hxsecW->GetMean()*Lumi/histW->GetSumOfWeights()<<endl;			
					cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<endl;			

}



			cout<<"  end from TH1D "<<endl;

		//hcount->Draw();
		CutFlowUnW->Write();
		histW->Write();
	if (isTT) histTop->Write();
	//	hxsecW->Write();
		file->Write();
		file->Close();
		cout<<" Failed events  "<<counter<<endl;
	}
/////////////////////////////////////////////

