Instructions to run the datacard producer

This python script produces root file(s) with histograms reading from (synchronization) NTuples.
Histograms can be plotted with the plotting tool by Alberto. 

To successfully run it, you need to pass the right input arguments and to modify 
a few things inside the script (input files, lumi, path), as described below. 

#################
#Input arguments#
#################
To run the script, do
 
	python datacard_producer_ztt2015.py CHANNEL CUTS WEIGHTS HISTOS MODE

e.g. 
	python datacard_producer_ztt2015 mt cuts_mt.json weights.json histos.json histos[datacard]

where:

CHANNEL = mt (for mutau) or et (for etau)
More channel options can be added. You can do it in the "get data tree" section of the script.

CUTS is the name of the json file containing the cuts you want to apply, and a name associated to each cut. 
As en example, see cuts_example.json. 

WEIGHTS is the name of the json file containing the set of weigths you want to apply on each event, and a name associated to each weight configuration.
As en example, see weights_example.json.  

HISTOS is the name of the json file containing the variables you want to plot, including a name, binning, axis titles. 
As en example, see histos_example.json. The keys of the last dictionary can not be changed. The description is the following:
"var" --> name of the variable to pass to TTree::Draw().
"nbins", "xmin", "xmax" --> binning of the histogram
"xtit", "ytit" --> axes titles, support TLatex syntax. 


MODE can be either "histos" or "datacards". 
In "datacards" mode, a root file will be created for each variable in the HISTOS json file.
In "histos" mode, only one root file is created for all variables in the HISTOS file. 
The histograms for each variable are put in a separate folder.

Remarks: 
- Beware that comments are not allowed in json files. 
- The last record of the json file should NOT be followed by a comma. 


###########################
# Changes in the script   #
###########################

- Adjust luminosity and path to the input ROOT files
in the dedicated section

- Adjust the file lists

For data, input files are defined in the "get data tree" section. 
For MC samples, for each category (TT, VV, ZTT, etc), a dictionary including file names, xsec, etc. is defined. 
The syntax of the dictionary entry is the following:

"nameOfProcess" :  {"xsec": , "isBinned": , "binVar": , "files": [ ]}
The nameOfProcess can be anything, but should be unique. For inclusive samples, use "isBinned":False and leave "binVar" empty ("") or omit it. 
In "files" put a list of input root files (only name, without .root). Remember that you have set the path of the input directory before. 
Example:
"ZZTo2L2Q" : {"xsec": 3.22, "isBinned": False, "binVar": "", "files": ["ZZTo2L2Q", "ZZTo2L2Q_extension"]}

For binned samples, you need to set "isBinned":True and state the binning variable name as in the NTuple (e.g. "binVar":"lheHt"). 
Moreover, you have to specify the intervals and associated weights. The assumption is that the xsec/Nevents factor is already included in the weights, so the only missing scale factor to be applies is luminosity. 
Example:

"DYJetsToLL_M-50_MG": {"isBinned": True, "binVar": "lheHt", 
						"files": ["DYJetsToLL_M-50_MG_74X", "DYJetsToLL_M-50_HT-100to200_74X", "DYJetsToLL_M-50_HT-200to400_74X", 				       										   "DYJetsToLL_M-50_HT-400to600_74X", "DYJetsToLL_M-50_HT-600toInf_74X"], 
	   				    "weights":{ (0, 100) : 0.000666354716, 
      							    (100, 200) : 0.000057518271,
                				    (200, 400) : 0.000049976499,
                				    (400, 600) : 0.000006277131,
                				    (600, 14001) : 0.000002712143 }


###########################
# DESCRIPTION of OUTPUT   #
###########################

The oputput ROOT file(s) is created in the directory where you run the script. 
The names are defined in the script. In "histos" mode, a suffix is added that contains the name of the HISTOS json file (to avoid overwriting in case you want to have two different histos.json files with different set of variables). 
A separate ROOT file is defined for every weight configuration in WEIGHTS. 
Inside each ROOT file, a folder is created corresponding to each CUT name defined in the related json file. 
In "datacards" mode, for each variable defined the the HISTOS json file, a separate ROOT file is created.
In "histos" mode, all histograms for all variables are in the same ROOT file, organized in subfolders, one for each variable. 
As an exaple for the latter, see . 


