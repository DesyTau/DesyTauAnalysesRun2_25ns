//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Wed Mar 23 09:55:01 2016 by ROOT version 6.02/05
// from TChain eltau/T/
//////////////////////////////////////////////////////////

#ifndef analyzer_h
#define analyzer_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include "plots.h"
#include "TFile.h"
#include "TH1.h"
#include "TGraphAsymmErrors.h"
#include <iostream>
#include <map>
#include <cmath>
#include <string>


//using namespace Mt2;
// Header file for the classes stored in the TTree if any.

class analyzer {
	public :
		TTree          *fChain;   //!pointer to the analyzed TTree or TChain
		Int_t           fCurrent; //!current Tree number in a TChain

		vector<TLorentzVector> AllJets_Lepton_noMet;
		vector<TLorentzVector> JetsMV;
		vector<TLorentzVector>  ElMV;
		vector<TLorentzVector>  MuMV;
		vector<TLorentzVector>  TauMV;
		vector<TLorentzVector>  LeptMV;
		TLorentzVector  ElV;
		TLorentzVector  MuV;
		TLorentzVector  TauV;
		TLorentzVector  JetsV;
		TLorentzVector  METV;

		vector <int> btag_index;


		const double MuMass = 0.105658367;
		const double tauMass = 1.776;
		const double electronMass = 0.51100e-3;
		const double muonMass = 0.10565837;
		const double pionMass = 0.1396;
		const double bTagCut  = 0.8000;


		// Fixed size dimensions of array or collections stored in the TTree if any.

		// Declaration of leaf types
   		Int_t	   nbtag;
	        Int_t	   njets;
		Float_t         met_ex;
		Float_t         met_ey;
		Float_t         met_ez;
		Float_t         met_pt;
		Float_t         met_phi;
		Float_t         gen_weight;
		Float_t         pu_weight;
		Float_t         LSF_weight;
		Float_t         TFR_weight;
		Float_t         top_weight;
		Float_t         all_weight;
		Float_t         trig_weight;
		Float_t         xsecs;
		Int_t           muon_index;
		Int_t           electron_index;
		Int_t           taus_index;
		Int_t           primvert_count;
		Float_t         primvert_x;
		Float_t         primvert_y;
		Float_t         primvert_z;
		Int_t           mu_count;
		Float_t         mu_px[20];
		Float_t         mu_py[20];
		Float_t         mu_pz[20];
		Float_t         mu_pt[20];
		Float_t         mu_eta[20];
		Float_t         mu_phi[20];
		Float_t         mu_charge[20];
		Float_t         mu_miniISO[20];
		Float_t         mu_dxy[20];
		Float_t         mu_dz[20];
		Float_t         mu_relIso[20];
		Int_t           jet_count;
		Int_t           npv;
		Int_t           jets_cleaned[30];
		Float_t         jet_e[30];
		Float_t         jet_px[30];
		Float_t         jet_py[30];
		Float_t         jet_pz[30];
		Float_t         jet_pt[30];
		Float_t         jet_eta[30];
		Float_t         jet_phi[30];
		Float_t         jet_flavour[30];
		Float_t         jet_btag[30];
		Float_t         CFCounter_[30];
		Int_t           jet_isLoose[30];
		Int_t           el_count;
		Float_t         el_px[20];
		Float_t         el_py[20];
		Float_t         el_pz[20];
		Float_t         el_pt[20];
		Float_t         el_eta[20];
		Float_t         el_phi[20];
		Float_t         el_miniISO[20];
		Float_t         el_dxy[20];
		Float_t         el_dz[20];
		Float_t         el_charge[20];
		Float_t         el_relIso[20];
		Int_t           ta_count;
		Float_t         ta_px[30];
		Float_t         ta_py[30];
		Float_t         ta_pz[30];
		Float_t         ta_mass[30];
		Float_t         ta_eta[30];
		Float_t         ta_phi[30];
		Float_t         ta_pt[30];
		Float_t         ta_dxy[30];
		Float_t         ta_dz[30];
		Float_t         ta_charge[30];
		Float_t         ta_relIso[30];
		Float_t         ta_IsoFlag;
		Float_t         event_sign;
		Float_t         event_secondLeptonVeto;
		Float_t         event_thirdLeptonVeto;
		Float_t         event_leptonDrTrigger;
		//   string 	   datasetName;
		string * datasetName = new std::string(); 
		string          *regionName;
		Float_t 	genTauMatched;
   		Float_t	   qcdweight;
		Float_t	   qcdweightup;
   		Float_t	   qcdweightdown;
   		Int_t 	   npartons;

		// List of branches
		TBranch        *b_met_ex;   //!
		TBranch        *b_met_ey;   //!
		TBranch        *b_met_ez;   //!
		TBranch        *b_met_pt;   //!
		TBranch        *b_met_phi;   //!
		TBranch        *b_gen_weight;   //!
		TBranch        *b_pu_weight;   //!
		TBranch        *b_LSF_weight;   //!
		TBranch        *b_TFR_weight;   //!
		TBranch        *b_top_weight;   //!
		TBranch        *b_all_weight;   //!
		TBranch        *b_trig_weight;   //!
		TBranch        *b_xsecs;   //!
		TBranch        *b_muon_index;   //!
		TBranch        *b_electron_index;   //!
		TBranch        *b_taus_index;   //!
		TBranch        *b_primvert_count;   //!
		TBranch        *b_primvert_x;   //!
		TBranch        *b_primvert_y;   //!
		TBranch        *b_primvert_z;   //!
		TBranch        *b_mu_count;   //!
		TBranch        *b_mu_px;   //!
		TBranch        *b_mu_py;   //!
		TBranch        *b_mu_pz;   //!
		TBranch        *b_mu_pt;   //!
		TBranch        *b_mu_eta;   //!
		TBranch        *b_mu_phi;   //!
		TBranch        *b_mu_charge;   //!
		TBranch        *b_mu_miniISO;   //!
		TBranch        *b_mu_dxy;   //!
		TBranch        *b_mu_dz;   //!
		TBranch        *b_mu_relIso;   //!
		TBranch        *b_jet_count;   //!
		TBranch        *b_npv;   //!
		TBranch        *b_jets_cleaned;   //!
		TBranch        *b_jet_e;   //!
		TBranch        *b_jet_px;   //!
		TBranch        *b_jet_py;   //!
		TBranch        *b_jet_pz;   //!
		TBranch        *b_jet_pt;   //!
		TBranch        *b_jet_eta;   //!
		TBranch        *b_jet_phi;   //!
		TBranch        *b_jet_flavour;   //!
		TBranch        *b_jet_btag;   //!
		TBranch        *b_jet_isLoose;   //!
		TBranch        *b_el_count;   //!
		TBranch        *b_el_px;   //!
		TBranch        *b_el_py;   //!
		TBranch        *b_el_pz;   //!
		TBranch        *b_el_pt;   //!
		TBranch        *b_el_eta;   //!
		TBranch        *b_el_phi;   //!
		TBranch        *b_el_miniISO;   //!
		TBranch        *b_el_dxy;   //!
		TBranch        *b_el_dz;   //!
		TBranch        *b_el_charge;   //!
		TBranch        *b_el_relIso;   //!
		TBranch        *b_ta_count;   //!
		TBranch        *b_ta_px;   //!
		TBranch        *b_ta_py;   //!
		TBranch        *b_ta_pz;   //!
		TBranch        *b_ta_mass;   //!
		TBranch        *b_ta_eta;   //!
		TBranch        *b_ta_phi;   //!
		TBranch        *b_ta_pt;   //!
		TBranch        *b_ta_dxy;   //!
		TBranch        *b_ta_dz;   //!
		TBranch        *b_ta_charge;   //!
		TBranch        *b_ta_IsoFlag;   //!
		TBranch        *b_ta_Iso;   //!
		TBranch        *b_ta_relIso;   //!
		TBranch        *b_datasetName;   //!
		TBranch        *b_CFCounter_;   //!
		TBranch        *b_regionName;   //!
		TBranch        *b_event_sign;   //!
		TBranch        *b_event_secondLeptonVeto;   //!
		TBranch        *b_event_thirdLeptonVeto;   //!
		TBranch        *b_event_leptonDrTrigger;   //!
		TBranch        *b_genTauMatched;   //!
		TBranch        *b_qcdweight;   //!
		TBranch        *b_qcdweightup;   //!
		TBranch        *b_qcdweightdown;   //!
		TBranch        *b_npartons;   //!
		TBranch        *b_nbtag;   //!
		TBranch        *b_njets;   //!

		analyzer(TTree *tree=0);
		virtual ~analyzer();
		virtual Int_t    Cut(Long64_t entry);
		virtual Int_t    GetEntry(Long64_t entry);
		virtual Long64_t LoadTree(Long64_t entry);
		virtual void     Init(TTree *tree);
		virtual void     Loop();
		//virtual void main(int argc, char * argv[]) ;
		// virtual void Loop(int argc, char * argv[]) ;
		virtual Bool_t   Notify();
		virtual void     Show(Long64_t entry = -1);

		void FillHists(int CutIndex, Double_t EvWeight, TLorentzVector  elV, TLorentzVector  muV, TLorentzVector tauV, vector<TLorentzVector>  &JetsV, TLorentzVector  &MetV, double Chimass, double mintermediate, string & Sel, int  mIndex, int eIndex, int  tIndex){

			AllJets_Lepton_noMet.clear();
			for (unsigned int i = 0; i <   JetsV.size(); i++) AllJets_Lepton_noMet.push_back (JetsV.at(i));


			if (Sel=="mutau" )    AllJets_Lepton_noMet.push_back (muV);
			if (Sel=="eltau" )    AllJets_Lepton_noMet.push_back (elV);
			if (Sel=="muel" )   { AllJets_Lepton_noMet.push_back (muV);AllJets_Lepton_noMet.push_back (elV);};

			//cout<<"  "<<muon_index<<"  "<<electron_index<<"  "<<taus_index<<"  "<<jet_count<<"  "<<met_ex<<"  "<<met_ey<<endl;

			//cout<<" Init  "<<mIndex<<"  "<<eIndex<<"  "<<tIndex<<endl;

			sumpT=0;

			double sumMuonpT=0;
			double sumElpT=0;
			double sumTaupT=0;  

			hnJet[CutIndex]->Fill(njets,EvWeight);
			hnMu[CutIndex]->Fill(mu_count,EvWeight);
	if (ta_count >-1)	hnTau[CutIndex]->Fill(ta_count,EvWeight);
			hnEl[CutIndex]->Fill(el_count,EvWeight);
			hnLep[CutIndex]->Fill(el_count+mu_count,EvWeight);

			hWeights[CutIndex]->Fill(EvWeight);
			hnpv[CutIndex]->Fill(npv,EvWeight);


			//Float_T mT  = double Lester::mTBound(...)

			//     if (JetsV.size() > 0) h0JetpT[CutIndex]->Fill(JetsV.at(0).Pt(),EvWeight);
			//  if(FillBJets){
			//      hnBJet[CutIndex]->Fill(Obj.nBJetGood,EvWeight);
			//  }
			//
			//cout << " Passing arguments befor" << JetsV.size()<<" muV "<<MuV.size()<<" tauV "<<TauV.size()<<" elV "<<ElV.size()<<" elI "<<eIndex<<" mI "<<mIndex<<"  tI "<<tIndex<<endl;

			if (Sel=="mutau"){


				
				//   Mt2::Basic_Mt2_332_Calculator mt2Calculator;
				//   Mt2::LorentzTransverseVector  vis_A(Mt2::TwoVector(muV.Px(), muV.Py()), muonMass);
				//   Mt2::LorentzTransverseVector  vis_B(Mt2::TwoVector(tauV.Px(), tauV.Py()), tauMass);
				//   Mt2::TwoVector                pT_Miss(MetV.Px(), MetV.Py());    
				//   double mt2  = mt2Calculator.mt2_332(vis_A, vis_B, pT_Miss, Chimass);
				 

				double v1[4] = {muV.Px(),muV.Py(),muV.Pz(),muonMass};
				double v2[4] = {tauV.Px(),tauV.Py(),tauV.Pz(),tauMass};
				double ecm = 13000.0;
				double mxlo = Chimass;
				double ptm[2] = {MetV.Px(),MetV.Py()};
				double vds[4] = {0,0,0,0};
				// TMctLib t;

				double Mt2as = 0; Mt2as = asymm_mt2_lester_bisect::get_mT2(muonMass, muV.Px(), muV.Py(),tauMass,tauV.Px(),tauV.Py(),MetV.Px(),MetV.Py(),Chimass,Chimass,0);
				double mcta = sqrt( 2*muV.Pt()*tauV.Pt()*(1+cos(muV.Phi()-tauV.Phi())) );

				
				//   cout<<"MCTa  = "<<mcta<<" MCT = "<<mct(v1,v2)
				//   <<", MCTcorr = "<<mctcorr(v1,v2,vds,ptm,ecm,mxlo)
				//   <<", MT2 = "<<mt2(v1,v2,vds,ptm,ecm,mxlo)<<"  Mt2 lester "<<Mt2as
				//   <<", MCy = "<<mcy(v1,v2,vds,ptm)
				 //  <<", MCx = "<<mcx(v1,v2,vds,ptm)
				 //  <<endl;
				 
				double MT2v =0 ; MT2v = mt2(v1,v2,vds,ptm,ecm,mxlo);

				hMt2mutau[CutIndex]->Fill(MT2v,EvWeight);
				hMt2lestermutau[CutIndex]->Fill(Mt2as,EvWeight);
				hMCTmutau[CutIndex]->Fill(mct(v1,v2),EvWeight);
				hMCTxmutau[CutIndex]->Fill(mcx(v1,v2,vds,ptm),EvWeight);
				hMCTymutau[CutIndex]->Fill(mcy(v1,v2,vds,ptm),EvWeight);
				hMCTbmutau[CutIndex]->Fill(mcta,EvWeight);
				hMT2lester_met[CutIndex]->Fill(Mt2as,MetV.Pt(),EvWeight);
				hMT2lester_MCTb[CutIndex]->Fill(Mt2as,mcta,EvWeight);

				//cout<<" asym "<<Mt2as<<"  "<<mt2<<endl;

				double Centr = Centrality(AllJets_Lepton_noMet);
				hCentrality[CutIndex]->Fill(Centr,EvWeight);
				//cout<<"Centr "<<Centr<<"  "<< EvWeight <<endl;
				//double mTB = Lester::mTBound(muV.E(), muV.Px(), muV.Py(), muV.Pz(), tauV.E(),tauV.Px(),tauV.Py(),tauV.Pz(),MetV.Px(),MetV.Py(), mintermediate);
				//hTBoundmutau[CutIndex]->Fill(mTB,EvWeight);
				//cout<<"  "<<mTB<<endl;
			//	     	double Dr= deltaR(MuV.at(mIndex).Eta(), MuV.at(mIndex).Phi(),TauV.at(mIndex).Eta(),TauV.at(mIndex).Phi());
				//double Dr= deltaR(MuV.at(0).Eta(), MuV.at(0).Phi(),TauV.at(0).Eta(),TauV.at(0).Phi());
				//double Dr = MuV.at(mIndex).DeltaR(TauV.at(tIndex));
				double Dr = muV.DeltaR(tauV);
				//
				TLorentzVector DiL = muV  + tauV;
				double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), MetV.Px(),  MetV.Py() );
				double MT = TMath::Sqrt(2*DiL.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMTmutau[CutIndex]->Fill(MT,EvWeight);
				hInvMassMuTau[CutIndex]->Fill(DiL.M(),EvWeight);
				hdR_mutau[CutIndex]->Fill(Dr,EvWeight);

				hdRmt_dPhi[CutIndex]->Fill(Dr,dPhi,EvWeight);

				TLorentzVector WBos = MetV + muV;

				dPhi=dPhiFrom2P( mu_px[muon_index], mu_py[muon_index], met_ex,  met_ey );
				//dPhi=dPhiFrom2P( muV.Px(), muV.Py(), MetV.Px(),  MetV.Py() );
				hdPhiMETLep[CutIndex]->Fill(dPhi,EvWeight);
				hdPhiMETMu[CutIndex]->Fill(dPhi,EvWeight);

				MT = TMath::Sqrt(2*mu_pt[muon_index]*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMT[CutIndex]->Fill(MT,EvWeight);
				hMTmu[CutIndex]->Fill(MT,EvWeight);
					dPhi=dPhiFrom2P( tauV.Px(), tauV.Py(), met_ex,  met_ey );
					float MTt = TMath::Sqrt(2*tauV.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
					hMTsum[CutIndex]->Fill(MT+MTt,EvWeight);
					float mttotal = sqrt(MT*MT + MTt*MTt);
					hMTtot[CutIndex]->Fill(mttotal,EvWeight);


				hmet_dPhi[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);
				hmet_dPhimu[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);

				hmet_MTmu[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);

				hMT_dPhi[CutIndex]->Fill(MT,dPhi,EvWeight);
				hMT_dPhimu[CutIndex]->Fill(MT,dPhi,EvWeight);

				float tauUnitX = tauV.Px()/tauV.Pt();
				float tauUnitY = tauV.Py()/tauV.Pt();

				//	cout<<" CHECK =========== "<<tauV.Pt()<<"  "<<ta_pt[tIndex]<<endl;	
				float muonUnitX = muV.Px()/muV.Pt();
				float muonUnitY = muV.Py()/muV.Pt();

				float zetaX = tauUnitX + muonUnitX;
				float zetaY = tauUnitY + muonUnitY;

				float normZeta = TMath::Sqrt(zetaX*zetaX+zetaY*zetaY);

				zetaX = zetaX/normZeta;
				zetaY = zetaY/normZeta;

				float vectorX = MetV.Px() + muV.Px() + tauV.Px();
				float vectorY = MetV.Py() + muV.Py() + tauV.Py();

				float vectorVisX = muV.Px() + tauV.Px();
				float vectorVisY = muV.Py() + tauV.Py();

				// computation of DZeta variable
				// pfmet
				float pzetamiss = MetV.Px()*zetaX + MetV.Py()*zetaY;
				float pzetavis = vectorVisX*zetaX + vectorVisY*zetaY;
				float dzeta = pzetamiss - 0.85*pzetavis;
			
				hMT2lester_DZeta[CutIndex]->Fill(Mt2as,dzeta,EvWeight);

				hDZeta[CutIndex]->Fill(dzeta,EvWeight);

				hmet_MT[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);
				hmet_MTsum[CutIndex]->Fill(MetV.Pt(),MT+MTt,EvWeight);
				hmet_MTtot[CutIndex]->Fill(MetV.Pt(),mttotal,EvWeight);
				hmet_DZeta[CutIndex]->Fill(MetV.Pt(),dzeta,EvWeight);
				hmet_MCTb[CutIndex]->Fill(MetV.Pt(),mcta,EvWeight);

				hDZeta_MCTb[CutIndex]->Fill(dzeta,mcta,EvWeight);
				hDZeta_MTsum[CutIndex]->Fill(dzeta,MT+MTt,EvWeight);
				hDZeta_MTtot[CutIndex]->Fill(dzeta,mttotal,EvWeight);
				hMTsum_MCTb[CutIndex]->Fill(MT+MTt,mcta,EvWeight);
				hMTtot_MCTb[CutIndex]->Fill(mttotal,mcta,EvWeight);
/**/


				//	cout<<"  MUV SIZE ==================== "<<MuV.size()<<"  iCut "<<CutIndex<<"  mIndex  "<<mIndex<<" tIndex  "<<tIndex<<endl;
			if (JetsV.size()>0){
				double dPhiJT=dPhiFrom2P( JetsV.at(0).Px(), JetsV.at(0).Py(), TauV.Px(),  TauV.Py() );
				hdPhiJ0Tau[CutIndex]->Fill(dPhiJT,EvWeight);
				}

			}
			if (Sel=="eltau" && eIndex > -1 && tIndex>-1){

			//	cout<<"==============================================================================================="<<endl;
				//double Dr= deltaR(ElV.at(eIndex).Eta(), ElV.at(eIndex).Phi(),TauV.at(tIndex).Eta(),TauV.at(tIndex).Phi());
				double v1[4] = {elV.Px(),elV.Py(),elV.Pz(),electronMass};
				double v2[4] = {tauV.Px(),tauV.Py(),tauV.Pz(),tauMass};
				double ecm = 13000.0;
				double mxlo = Chimass;
				double ptm[2] = {MetV.Px(),MetV.Py()};
				double vds[4] = {0,0,0,0};
				// TMctLib t;
			
				double Mt2as = 0 ; Mt2as = asymm_mt2_lester_bisect::get_mT2(electronMass, elV.Px(), elV.Py(),tauMass,tauV.Px(),tauV.Py(),MetV.Px(),MetV.Py(),Chimass,Chimass,0);
				//   cout<<" Will call with Mt2 "<<Mt2<<"   "<<Chimass<<endl;
				hMt2eltau[CutIndex]->Fill(Mt2as,EvWeight);
				double mcta = sqrt( 2*elV.Pt()*tauV.Pt()*(1+cos(elV.Phi()-tauV.Phi())) );
				double MT2v =0 ; MT2v = mt2(v1,v2,vds,ptm,ecm,mxlo);
				hMt2eltau[CutIndex]->Fill(MT2v,EvWeight);
				hMt2lestereltau[CutIndex]->Fill(Mt2as,EvWeight);
			
				hMCTeltau[CutIndex]->Fill(mct(v1,v2),EvWeight);
				hMCTxeltau[CutIndex]->Fill(mcx(v1,v2,vds,ptm),EvWeight);
				hMCTyeltau[CutIndex]->Fill(mcy(v1,v2,vds,ptm),EvWeight);
				hMCTbeltau[CutIndex]->Fill(mcta,EvWeight);

				hMT2lester_met[CutIndex]->Fill(Mt2as,MetV.Pt(),EvWeight);
				hMT2lester_MCTb[CutIndex]->Fill(Mt2as,mcta,EvWeight);

				double Centr = Centrality(AllJets_Lepton_noMet);
				hCentrality[CutIndex]->Fill(Centr,EvWeight);
				//cout<<"Centr "<<Centr<<"  "<< EvWeight <<endl;
				//double mTB = Lester::mTBound(elV.E(), elV.Px(), elV.Py(), elV.Pz(), tauV.E(),tauV.Px(),tauV.Py(),tauV.Pz(),MetV.Px(),MetV.Py(), mintermediate);
				//hTBoundeltau[CutIndex]->Fill(mTB);
				//cout<<"  "<<mTB<<endl;
				double Dr = elV.DeltaR(tauV);


				TLorentzVector DiL = elV + tauV;
				double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), MetV.Px(),  MetV.Py() );
				double MT = TMath::Sqrt(2*DiL.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMTeltau[CutIndex]->Fill(MT,EvWeight);
				hInvMassElTau[CutIndex]->Fill(DiL.M(),EvWeight);
				hdRet_dPhi[CutIndex]->Fill(Dr,dPhi,EvWeight);
				hdR_eltau[CutIndex]->Fill(Dr,EvWeight);


				TLorentzVector WBos = MetV + elV;

				dPhi=dPhiFrom2P( elV.Px(), elV.Py(), MetV.Px(),  MetV.Py() );
				hdPhiMETLep[CutIndex]->Fill(dPhi,EvWeight);
				hdPhiMETMu[CutIndex]->Fill(dPhi,EvWeight);

				MT = TMath::Sqrt(2*elV.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMT[CutIndex]->Fill(MT,EvWeight);
				hMTel[CutIndex]->Fill(MT,EvWeight);
					dPhi=dPhiFrom2P( tauV.Px(), tauV.Py(), met_ex,  met_ey );
					float MTt = TMath::Sqrt(2*tauV.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
					hMTsum[CutIndex]->Fill(MT+MTt,EvWeight);
					float mttotal = sqrt(MT*MT + MTt*MTt);
					hMTtot[CutIndex]->Fill(mttotal,EvWeight);

				hmet_dPhi[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);
				hmet_dPhiel[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);

				hmet_MTel[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);

				hMT_dPhi[CutIndex]->Fill(MT,dPhi,EvWeight);
				hMT_dPhiel[CutIndex]->Fill(MT,dPhi,EvWeight);

				float tauUnitX = tauV.Px()/tauV.Pt();
				float tauUnitY = tauV.Py()/tauV.Pt();

				float elUnitX = elV.Px()/elV.Pt();
				float elUnitY = elV.Py()/elV.Pt();

				float zetaX = tauUnitX + elUnitX;
				float zetaY = tauUnitY + elUnitY;

				float normZeta = TMath::Sqrt(zetaX*zetaX+zetaY*zetaY);

				zetaX = zetaX/normZeta;
				zetaY = zetaY/normZeta;

				float vectorX = MetV.Px() + elV.Px() + tauV.Px();
				float vectorY = MetV.Py() + elV.Py() + tauV.Py();

				float vectorVisX = elV.Px() + tauV.Px();
				float vectorVisY = elV.Py() + tauV.Py();

				// computation of DZeta variable
				// pfmet
				float pzetamiss = MetV.Px()*zetaX + MetV.Py()*zetaY;
				float pzetavis = vectorVisX*zetaX + vectorVisY*zetaY;
				float dzeta = pzetamiss - 0.85*pzetavis;

				hMT2lester_DZeta[CutIndex]->Fill(Mt2as,dzeta,EvWeight);
				hDZeta[CutIndex]->Fill(dzeta,EvWeight);

				hmet_MT[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);
				hmet_MTsum[CutIndex]->Fill(MetV.Pt(),MT+MTt,EvWeight);
				hmet_MTtot[CutIndex]->Fill(MetV.Pt(),mttotal,EvWeight);
				hmet_DZeta[CutIndex]->Fill(MetV.Pt(),dzeta,EvWeight);
				hmet_MCTb[CutIndex]->Fill(MetV.Pt(),mcta,EvWeight);

				hDZeta_MCTb[CutIndex]->Fill(dzeta,mcta,EvWeight);
				hDZeta_MTsum[CutIndex]->Fill(dzeta,MT+MTt,EvWeight);
				hDZeta_MTtot[CutIndex]->Fill(dzeta,mttotal,EvWeight);
				hMTsum_MCTb[CutIndex]->Fill(MT+MTt,mcta,EvWeight);
				hMTtot_MCTb[CutIndex]->Fill(mttotal,mcta,EvWeight);


			if (JetsV.size()>0){
				double dPhiJT=dPhiFrom2P( JetsV.at(0).Px(), JetsV.at(0).Py(), TauV.Px(),  TauV.Py() );
				hdPhiJ0Tau[CutIndex]->Fill(dPhiJT,EvWeight);
				}

			}


			if (Sel=="muel"){
	//		cout<<" Helo there  "<<endl;



				TLorentzVector DiL = muV  + elV;
				double v1[4] = {muV.Px(),muV.Py(),muV.Pz(),muonMass};
				double v2[4] = {elV.Px(),elV.Py(),elV.Pz(),electronMass};
				double ecm = 13000.0;
				double mxlo = Chimass;
				double ptm[2] = {MetV.Px(),MetV.Py()};
				double vds[4] = {0,0,0,0};
				// TMctLib t;

				double Mt2as = 0; Mt2as = asymm_mt2_lester_bisect::get_mT2(muonMass, muV.Px(), muV.Py(),electronMass,elV.Px(),elV.Py(),MetV.Px(),MetV.Py(),Chimass,Chimass,0);
				double mcta = sqrt( 2*muV.Pt()*elV.Pt()*(1+cos(muV.Phi()-elV.Phi())) );

				double MT2v =0 ; MT2v = mt2(v1,v2,vds,ptm,ecm,mxlo);

				hMt2muel[CutIndex]->Fill(MT2v,EvWeight);
				hMt2lestermuel[CutIndex]->Fill(Mt2as,EvWeight);
				hMCTmuel[CutIndex]->Fill(mct(v1,v2),EvWeight);
				hMCTxmuel[CutIndex]->Fill(mcx(v1,v2,vds,ptm),EvWeight);
				hMCTymuel[CutIndex]->Fill(mcy(v1,v2,vds,ptm),EvWeight);
				hMCTbmuel[CutIndex]->Fill(mcta,EvWeight);
				hMT2lester_met[CutIndex]->Fill(Mt2as,MetV.Pt(),EvWeight);
				hMT2lester_MCTb[CutIndex]->Fill(Mt2as,mcta,EvWeight);

				//cout<<" asym "<<Mt2as<<"  "<<mt2<<endl;

				double Centr = Centrality(AllJets_Lepton_noMet);
				hCentrality[CutIndex]->Fill(Centr,EvWeight);
				//cout<<"Centr "<<Centr<<"  "<< EvWeight <<endl;
				//double mTB = Lester::mTBound(muV.E(), muV.Px(), muV.Py(), muV.Pz(), elV.E(),elV.Px(),elV.Py(),elV.Pz(),MetV.Px(),MetV.Py(), mintermediate);
				//hTBoundmuel[CutIndex]->Fill(mTB,EvWeight);
				//cout<<"  "<<mTB<<endl;

				//	     	double Dr= deltaR(MuV.at(mIndex).Eta(), MuV.at(mIndex).Phi(),TauV.at(mIndex).Eta(),TauV.at(mIndex).Phi());
				//double Dr= deltaR(MuV.at(0).Eta(), MuV.at(0).Phi(),TauV.at(0).Eta(),TauV.at(0).Phi());
				//double Dr = MuV.at(mIndex).DeltaR(TauV.at(tIndex));
				double Dr = muV.DeltaR(elV);
				//
				double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), MetV.Px(),  MetV.Py() );
				double MT = TMath::Sqrt(2*DiL.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMTmuel[CutIndex]->Fill(MT,EvWeight);
				hInvMassMuEl[CutIndex]->Fill(DiL.M(),EvWeight);
				hdR_muel[CutIndex]->Fill(Dr,EvWeight);

				hdRmt_dPhi[CutIndex]->Fill(Dr,dPhi,EvWeight);

				TLorentzVector WBos = MetV + DiL;

				dPhi=dPhiFrom2P( mu_px[muon_index], mu_py[muon_index], met_ex,  met_ey );
				//dPhi=dPhiFrom2P( muV.Px(), muV.Py(), MetV.Px(),  MetV.Py() );
				hdPhiMETLep[CutIndex]->Fill(dPhi,EvWeight);
				hdPhiMETMu[CutIndex]->Fill(dPhi,EvWeight);

				MT = TMath::Sqrt(2*mu_pt[muon_index]*MetV.Pt()*(1-TMath::Cos(dPhi)));
				hMTmu[CutIndex]->Fill(MT,EvWeight);
					dPhi=dPhiFrom2P( elV.Px(), elV.Py(), met_ex,  met_ey );
					float MTel = TMath::Sqrt(2*elV.Pt()*MetV.Pt()*(1-TMath::Cos(dPhi)));
					
					dPhi=dPhiFrom2P( elV.Px(), elV.Py(), muV.Px(),  muV.Py() );
					float MTelmu = TMath::Sqrt(2*elV.Pt()*muV.Pt()*(1-TMath::Cos(dPhi)));

					hMTsum[CutIndex]->Fill(MT+MTel+MTelmu,EvWeight);
					hMT[CutIndex]->Fill(MTelmu,EvWeight);

					float mttotal = sqrt(MT*MT + MTel*MTel+ MTelmu*MTelmu);
					hMTtot[CutIndex]->Fill(mttotal,EvWeight);
				
				hMTel[CutIndex]->Fill(MTel,EvWeight);


				hmet_dPhi[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);
				hmet_dPhimu[CutIndex]->Fill(MetV.Pt(),dPhi,EvWeight);

				hmet_MTmu[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);

				hMT_dPhi[CutIndex]->Fill(MT,dPhi,EvWeight);
				hMT_dPhimu[CutIndex]->Fill(MT,dPhi,EvWeight);

				float tauUnitX = elV.Px()/elV.Pt();
				float tauUnitY = elV.Py()/elV.Pt();

				float muonUnitX = muV.Px()/muV.Pt();
				float muonUnitY = muV.Py()/muV.Pt();

				float zetaX = tauUnitX + muonUnitX;
				float zetaY = tauUnitY + muonUnitY;

				float normZeta = TMath::Sqrt(zetaX*zetaX+zetaY*zetaY);

				zetaX = zetaX/normZeta;
				zetaY = zetaY/normZeta;

				float vectorX = MetV.Px() + muV.Px() + elV.Px();
				float vectorY = MetV.Py() + muV.Py() + elV.Py();

				float vectorVisX = muV.Px() + elV.Px();
				float vectorVisY = muV.Py() + elV.Py();

				// computation of DZeta variable
				// pfmet
				float pzetamiss = MetV.Px()*zetaX + MetV.Py()*zetaY;
				float pzetavis = vectorVisX*zetaX + vectorVisY*zetaY;
				float dzeta = pzetamiss - 0.85*pzetavis;

				hMT2lester_DZeta[CutIndex]->Fill(Mt2as,dzeta,EvWeight);
				hDZeta[CutIndex]->Fill(dzeta,EvWeight);


				hmet_MT[CutIndex]->Fill(MetV.Pt(),MT,EvWeight);
				hmet_MTsum[CutIndex]->Fill(MetV.Pt(),MT+MTel,EvWeight);
				hmet_MTtot[CutIndex]->Fill(MetV.Pt(),mttotal,EvWeight);
				hmet_DZeta[CutIndex]->Fill(MetV.Pt(),dzeta,EvWeight);
				hmet_MCTb[CutIndex]->Fill(MetV.Pt(),mcta,EvWeight);

				hDZeta_MCTb[CutIndex]->Fill(dzeta,mcta,EvWeight);
				hDZeta_MTsum[CutIndex]->Fill(dzeta,MT+MTel,EvWeight);
				hDZeta_MTtot[CutIndex]->Fill(dzeta,mttotal,EvWeight);
				hMTsum_MCTb[CutIndex]->Fill(MT+MTel,mcta,EvWeight);
				hMTtot_MCTb[CutIndex]->Fill(mttotal,mcta,EvWeight);



			}/////////////////end of muel channel




			if (eIndex != -1)
			{

				hElpt[CutIndex]->Fill(el_pt[eIndex],EvWeight);
				hEleta[CutIndex]->Fill(el_eta[eIndex],EvWeight);
				hel_dxy[CutIndex]->Fill(el_dxy[eIndex],EvWeight);
				hel_dz[CutIndex]->Fill(el_dz[eIndex],EvWeight);

				double dPhiJ=dPhiFrom2P( el_px[eIndex], el_py[eIndex], MetV.Px(),  MetV.Py() );
				hdPhiElMET[CutIndex]->Fill(dPhiJ,EvWeight);


				sumElpT +=elV.Pt();
				hLeppt[CutIndex]->Fill(el_pt[eIndex],EvWeight);
				hLepeta[CutIndex]->Fill(el_eta[eIndex],EvWeight);
				hIsoEl[CutIndex]->Fill(el_relIso[0],EvWeight);

			}

			if (mIndex !=-1 )
			{

				hMupt[CutIndex]->Fill(mu_pt[mIndex],EvWeight);
				hMueta[CutIndex]->Fill(mu_eta[mIndex],EvWeight);
				hmu_dxy[CutIndex]->Fill(mu_dxy[mIndex],EvWeight);
				hmu_dz[CutIndex]->Fill(mu_dz[mIndex],EvWeight);

				double dPhiJ=dPhiFrom2P( mu_px[mIndex], mu_py[mIndex], MetV.Px(),  MetV.Py() );
				hdPhiMuMET[CutIndex]->Fill(dPhiJ,EvWeight);


				sumMuonpT +=muV.Pt();
				hLeppt[CutIndex]->Fill(muV.Pt(),EvWeight);
				hLepeta[CutIndex]->Fill(muV.Eta(),EvWeight);
				hIsoMu[CutIndex]->Fill(mu_relIso[0],EvWeight);


				//cout<<" Inside  "<<relIsoL<<"  Cut"<<"  "<<CutIndex<<endl;

				if (tIndex>-1 && ta_count > 0){
					double q = ta_charge[tIndex] * mu_charge[mIndex];
				}

			}


			if (tIndex !=-1)
			{

				hTaupt[CutIndex]->Fill(ta_pt[tIndex],EvWeight);
				hTaueta[CutIndex]->Fill(ta_eta[tIndex],EvWeight);
				htau_dxy[CutIndex]->Fill(ta_dxy[tIndex],EvWeight);
				htau_dz[CutIndex]->Fill(ta_dz[tIndex],EvWeight);

				double dPhiJ=dPhiFrom2P( ta_px[mIndex], ta_py[mIndex], MetV.Px(),  MetV.Py() );
				hdPhiTauMET[CutIndex]->Fill(dPhiJ,EvWeight);

				sumTaupT +=tauV.Pt();
				hLeppt[CutIndex]->Fill(tauV.Pt(),EvWeight);
				hLepeta[CutIndex]->Fill(tauV.Eta(),EvWeight);
				hIsoTau[CutIndex]->Fill(ta_relIso[0],EvWeight);

			}


			int bjets=0;
			if (JetsV.size()>0){

				double dPhiJ=dPhiFrom2P( JetsV.at(0).Px(), JetsV.at(0).Py(), MetV.Px(),  MetV.Py() );
				hdPhiJ0MET[CutIndex]->Fill(dPhiJ,EvWeight);

				hPtJ0[CutIndex]->Fill(JetsV.at(0).Pt(),EvWeight);
				double Dr = tauV.DeltaR(JetsV.at(0));
				hdR_taujet[CutIndex]->Fill(Dr,EvWeight);

			}

			if (JetsV.size()>1){
				hPtJ1[CutIndex]->Fill(JetsV.at(1).Pt(),EvWeight);
				hHT2[CutIndex]->Fill(JetsV.at(0).Pt()+JetsV.at(1).Pt(),EvWeight);
				double dPhiJ=dPhiFrom2P( JetsV.at(1).Px(), JetsV.at(1).Py(), MetV.Px(),  MetV.Py() );
				hdPhiJ1MET[CutIndex]->Fill(dPhiJ,EvWeight);


				//double mct = sqrt( 2*JetsV.at(0).Pt()*JetsV.at(1).Pt()*(1+cos(JetsV.at(0).Phi()-JetsV.at(1).Phi())) )
				//hMCTJ0J1[CutIndex]->Fill(mct,EvWeight);

			}
			if (JetsV.size()>2){
				hPtJ2[CutIndex]->Fill(JetsV.at(2).Pt(),EvWeight);
				hHT3[CutIndex]->Fill(JetsV.at(0).Pt()+JetsV.at(1).Pt()+JetsV.at(2).Pt(),EvWeight);
				double dPhiJ=dPhiFrom2P( JetsV.at(2).Px(), JetsV.at(2).Py(), MetV.Px(),  MetV.Py() );
				hdPhiJ2MET[CutIndex]->Fill(dPhiJ,EvWeight);
			}
			if (JetsV.size()>3){
				hPtJ3[CutIndex]->Fill(JetsV.at(3).Pt(),EvWeight);
				hHT4[CutIndex]->Fill(JetsV.at(0).Pt()+JetsV.at(1).Pt()+JetsV.at(2).Pt()+JetsV.at(3).Pt(),EvWeight);
				double dPhiJ=dPhiFrom2P( JetsV.at(3).Px(), JetsV.at(3).Py(), MetV.Px(),  MetV.Py() );
				hdPhiJ3MET[CutIndex]->Fill(dPhiJ,EvWeight);
			}

			for (unsigned int ij=0;ij<JetsV.size();ij++){
				//sumpT+=jet_pt[ij];
				sumpT+=JetsV.at(ij).Pt();
				//double dPhiJ=dPhiFrom2P( jet_px[ij], jet_py[ij], MetV.Px(),  MetV.Py() );
				double dPhiJ=dPhiFrom2P( JetsV.at(ij).Px(), JetsV.at(ij).Py(), MetV.Px(),  MetV.Py() );
				hdPhiJMET[CutIndex]->Fill(dPhiJ,EvWeight);
			}

			bjets = nbtag;
			hnBJet[CutIndex]->Fill(nbtag,EvWeight);

			hHT[CutIndex]->Fill(sumpT,EvWeight);

			double HText =sumpT;
			if (Sel=="mutau" && mIndex !=-1)    HText += mu_pt[mIndex];
			if (Sel=="eltau" && eIndex !=-1)    HText += elV.Pt();
			hHText[CutIndex]->Fill(HText,EvWeight);
			if (Sel=="mutau" && mIndex !=-1) {
				hRht[CutIndex]->Fill(mu_pt[mIndex]/HText,EvWeight);
				hPtOHT[CutIndex]->Fill(  mu_pt[mIndex]/sumpT,EvWeight);
			}
			if (Sel=="eltau" && eIndex !=-1) {
				hRht[CutIndex]->Fill(elV.Pt()/HText,EvWeight);
				hPtOHT[CutIndex]->Fill(  elV.Pt()/sumpT,EvWeight);

			}
			hMET[CutIndex]->Fill(MetV.Pt(),EvWeight);
			hMETphi[CutIndex]->Fill(MetV.Phi(),EvWeight);

			hMeffMuon[CutIndex]->Fill(sumMuonpT+sumpT,EvWeight);
			hMeffEl[CutIndex]->Fill(sumElpT+sumpT,EvWeight);
			hMeffTau[CutIndex]->Fill(sumTaupT+sumpT,EvWeight);
			double mett = MetV.Pt();
			if (MetV.Pt()>0 ) {
				hHTOsqrMET[CutIndex]->Fill(  sumpT/sqrt(MetV.Pt()),EvWeight);
				hMeffMuonOsqrMET[CutIndex]->Fill( (sumMuonpT+sumpT)/sqrt(MetV.Pt()),EvWeight);
				hMeffElOsqrMET[CutIndex]->Fill( (sumElpT+sumpT)/sqrt(MetV.Pt()),EvWeight);
				hMeffTauOsqrMET[CutIndex]->Fill( (sumTaupT+sumpT)/sqrt(MetV.Pt()),EvWeight);
			}

			else {
				hHTOsqrMET[CutIndex]->Fill(  -1,EvWeight);
				hMeffMuonOsqrMET[CutIndex]->Fill(-1,EvWeight);
				hMeffElOsqrMET[CutIndex]->Fill( -1,EvWeight);
				hMeffTauOsqrMET[CutIndex]->Fill( -1,EvWeight);
			}
			// hMT[CutIndex]->Fill(MT,EvWeight);
			//  hDZeta->Fill(DZeta,EvWeight);



		}


		};

#endif

#ifdef analyzer_cxx
		analyzer::analyzer(TTree *tree) : fChain(0) 
			{
				// if parameter tree is not specified (or zero), connect the file
				// used to generate this class and read the Tree.
				if (tree == 0) {

#ifdef SINGLE_TREE
					// The following code should be used if you want this class to access
					// a single tree instead of a chain
					TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("Memory Directory");
					if (!f || !f->IsOpen()) {
						f = new TFile("Memory Directory");
					}
					f->GetObject("CHANNELHERE/T",tree);

#else // SINGLE_TREE

					// The following code should be used if you want this class to access a chain
					// of trees.
					TChain * chain = new TChain("CHANNELHERE/T","");

					chain->Add("/nfs/dust/cms/user/alkaloge/TauAnalysis/new/new/CMSSW_8_0_12/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE/FILEIN/CHANNELHERE/T");
					tree = chain;
#endif // SINGLE_TREE

				}
				Init(tree);
			}

		analyzer::~analyzer()
		{
			if (!fChain) return;
			delete fChain->GetCurrentFile();
		}

		Int_t analyzer::GetEntry(Long64_t entry)
		{
			// Read contents of entry.
			if (!fChain) return 0;
			return fChain->GetEntry(entry);
		}
		Long64_t analyzer::LoadTree(Long64_t entry)
		{
			// Set the environment to read one entry
			if (!fChain) return -5;
			Long64_t centry = fChain->LoadTree(entry);
			if (centry < 0) return centry;
			if (fChain->GetTreeNumber() != fCurrent) {
				fCurrent = fChain->GetTreeNumber();
				Notify();
			}
			return centry;
		}







		void analyzer::Init(TTree *tree)
		{
			// The Init() function is called when the selector needs to initialize
			// a new tree or chain. Typically here the branch addresses and branch
			// pointers of the tree will be set.
			// It is normally not necessary to make changes to the generated
			// code, but the routine can be extended by the user if needed.
			// Init() will be called many times when running on PROOF
			// (once per file to be processed).

			// Set branch addresses and branch pointers
			if (!tree) return;
			fChain = tree;
			fCurrent = -1;
			fChain->SetMakeClass(1);

			fChain->SetBranchAddress("met_ex", &met_ex, &b_met_ex);
			fChain->SetBranchAddress("met_ey", &met_ey, &b_met_ey);
			fChain->SetBranchAddress("met_ez", &met_ez, &b_met_ez);
			fChain->SetBranchAddress("met_pt", &met_pt, &b_met_pt);
			fChain->SetBranchAddress("met_phi", &met_phi, &b_met_phi);
			fChain->SetBranchAddress("gen_weight", &gen_weight, &b_gen_weight);
			fChain->SetBranchAddress("pu_weight", &pu_weight, &b_pu_weight);
			fChain->SetBranchAddress("LSF_weight", &LSF_weight, &b_LSF_weight);
			fChain->SetBranchAddress("TFR_weight", &TFR_weight, &b_TFR_weight);
			fChain->SetBranchAddress("top_weight", &top_weight, &b_top_weight);
			fChain->SetBranchAddress("all_weight", &all_weight, &b_all_weight);
			fChain->SetBranchAddress("trig_weight", &trig_weight, &b_trig_weight);
			fChain->SetBranchAddress("xsecs", &xsecs, &b_xsecs);
			fChain->SetBranchAddress("muon_index", &muon_index, &b_muon_index);
			fChain->SetBranchAddress("electron_index", &electron_index, &b_electron_index);
			fChain->SetBranchAddress("taus_index", &taus_index, &b_taus_index);
			fChain->SetBranchAddress("primvert_count", &primvert_count, &b_primvert_count);
			fChain->SetBranchAddress("primvert_x", &primvert_x, &b_primvert_x);
			fChain->SetBranchAddress("primvert_y", &primvert_y, &b_primvert_y);
			fChain->SetBranchAddress("primvert_z", &primvert_z, &b_primvert_z);
			fChain->SetBranchAddress("mu_count", &mu_count, &b_mu_count);
			fChain->SetBranchAddress("mu_px", mu_px, &b_mu_px);
			fChain->SetBranchAddress("mu_py", mu_py, &b_mu_py);
			fChain->SetBranchAddress("mu_pz", mu_pz, &b_mu_pz);
			fChain->SetBranchAddress("mu_pt", mu_pt, &b_mu_pt);
			fChain->SetBranchAddress("mu_eta", mu_eta, &b_mu_eta);
			fChain->SetBranchAddress("mu_phi", mu_phi, &b_mu_phi);
			fChain->SetBranchAddress("mu_charge", mu_charge, &b_mu_charge);
			fChain->SetBranchAddress("mu_miniISO", mu_miniISO, &b_mu_miniISO);
			fChain->SetBranchAddress("mu_dxy", mu_dxy, &b_mu_dxy);
			fChain->SetBranchAddress("mu_dz", mu_dz, &b_mu_dz);
			fChain->SetBranchAddress("mu_relIso", mu_relIso, &b_mu_relIso);
			fChain->SetBranchAddress("jet_count", &jet_count, &b_jet_count);
			fChain->SetBranchAddress("npv", &npv, &b_npv);
			fChain->SetBranchAddress("jets_cleaned", &jets_cleaned, &b_jets_cleaned);
  			fChain->SetBranchAddress("njets", &njets, &b_njets);
			fChain->SetBranchAddress("jet_e", jet_e, &b_jet_e);
			fChain->SetBranchAddress("jet_px", jet_px, &b_jet_px);
			fChain->SetBranchAddress("jet_py", jet_py, &b_jet_py);
			fChain->SetBranchAddress("jet_pz", jet_pz, &b_jet_pz);
			fChain->SetBranchAddress("jet_pt", jet_pt, &b_jet_pt);
			fChain->SetBranchAddress("jet_eta", jet_eta, &b_jet_eta);
			fChain->SetBranchAddress("jet_phi", jet_phi, &b_jet_phi);
			fChain->SetBranchAddress("jet_flavour", jet_flavour, &b_jet_flavour);
			fChain->SetBranchAddress("jet_btag", jet_btag, &b_jet_btag);
			fChain->SetBranchAddress("jet_isLoose", jet_isLoose, &b_jet_isLoose);
			fChain->SetBranchAddress("el_count", &el_count, &b_el_count);
			fChain->SetBranchAddress("el_px", el_px, &b_el_px);
			fChain->SetBranchAddress("el_py", el_py, &b_el_py);
			fChain->SetBranchAddress("el_pz", el_pz, &b_el_pz);
			fChain->SetBranchAddress("el_pt", el_pt, &b_el_pt);
			fChain->SetBranchAddress("el_eta", el_eta, &b_el_eta);
			fChain->SetBranchAddress("el_phi", el_phi, &b_el_phi);
			fChain->SetBranchAddress("el_miniISO", el_miniISO, &b_el_miniISO);
			fChain->SetBranchAddress("el_dxy", el_dxy, &b_el_dxy);
			fChain->SetBranchAddress("el_dz", el_dz, &b_el_dz);
			fChain->SetBranchAddress("el_charge", el_charge, &b_el_charge);
			fChain->SetBranchAddress("el_relIso", el_relIso, &b_el_relIso);
			fChain->SetBranchAddress("ta_count", &ta_count, &b_ta_count);
			fChain->SetBranchAddress("ta_px", ta_px, &b_ta_px);
			fChain->SetBranchAddress("ta_py", ta_py, &b_ta_py);
			fChain->SetBranchAddress("ta_pz", ta_pz, &b_ta_pz);
			fChain->SetBranchAddress("ta_mass", ta_mass, &b_ta_mass);
			fChain->SetBranchAddress("ta_eta", ta_eta, &b_ta_eta);
			fChain->SetBranchAddress("ta_phi", ta_phi, &b_ta_phi);
			fChain->SetBranchAddress("ta_pt", ta_pt, &b_ta_pt);
			fChain->SetBranchAddress("ta_dxy", ta_dxy, &b_ta_dxy);
			fChain->SetBranchAddress("ta_dz", ta_dz, &b_ta_dz);
			fChain->SetBranchAddress("ta_charge", ta_charge, &b_ta_charge);
			fChain->SetBranchAddress("ta_IsoFlag", &ta_IsoFlag, &b_ta_IsoFlag);
			fChain->SetBranchAddress("ta_relIso", ta_relIso, &b_ta_relIso);
			fChain->SetBranchAddress("datasetName", &datasetName);
			fChain->SetBranchAddress("CFCounter_", CFCounter_,&b_CFCounter_);
			fChain->SetBranchAddress("regionName", &regionName, &b_regionName);
			fChain->SetBranchAddress("event_sign", &event_sign, &b_event_sign);
			fChain->SetBranchAddress("event_secondLeptonVeto", &event_secondLeptonVeto, &b_event_secondLeptonVeto);
			fChain->SetBranchAddress("event_thirdLeptonVeto", &event_thirdLeptonVeto, &b_event_thirdLeptonVeto);
			fChain->SetBranchAddress("event_leptonDrTrigger", &event_leptonDrTrigger, &b_event_leptonDrTrigger);
			fChain->SetBranchAddress("genTauMatched", &genTauMatched, &b_genTauMatched);

			
   			fChain->SetBranchAddress("qcdweight", &qcdweight, &b_qcdweight);
			fChain->SetBranchAddress("qcdweightup", &qcdweightup, &b_qcdweightup);
			fChain->SetBranchAddress("qcdweightdown", &qcdweightdown, &b_qcdweightdown);
		        fChain->SetBranchAddress("nbtag", &nbtag, &b_nbtag);

		        fChain->SetBranchAddress("nbtag", &nbtag, &b_nbtag);
  			fChain->SetBranchAddress("npartons",&npartons,&b_npartons);

			Notify();
		}

		Bool_t analyzer::Notify()
		{
			// The Notify() function is called when a new file is opened. This
			// can be either for a new TTree in a TChain or when when a new TTree
			// is started when using PROOF. It is normally not necessary to make changes
			// to the generated code, but the routine can be extended by the
			// user if needed. The return value is currently not used.

			return kTRUE;
		}






		void analyzer::Show(Long64_t entry)
		{
			// Print contents of entry.
			// If entry is not specified, print current entry
			if (!fChain) return;
			fChain->Show(entry);
		}
		Int_t analyzer::Cut(Long64_t entry)
		{
			// This function may be called from Loop.
			// returns  1 if entry is accepted.
			// returns -1 otherwise.
			return 1;
		}




#endif // #ifdef analyzer_cxx
