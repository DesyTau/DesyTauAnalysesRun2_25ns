#define analyzer_cxx
#include "analyzer.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
#include <cmath>
#include <sstream>
#include <iomanip>
#include "TChain.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TLegend.h"
#include "TROOT.h"
#include "TFrame.h"
#include "TGaxis.h"
#include "TStyle.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include "TList.h"
#include <string>
#include "TObject.h"
#include "TBranch.h"
#include <functional>
#include "TAxis.h"
#include "TChain.h"
#include "TMath.h"
#include "Riostream.h"
#include <iostream>
#include <fstream>




using namespace std;



void analyzer::Loop(){
cout <<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAa" <<endl;

	if (fChain == 0) return;
cout <<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAa" <<endl;

	CutList.clear();
	CutList.push_back("Nocut");
	CutList.push_back("#mu#tau");
	CutList.push_back("TauFakeRate");
	CutList.push_back("2ndlepV");
	CutList.push_back("3rdlepV");
	CutList.push_back("btag=0");
	CutList.push_back("MT>120"); //6
	CutList.push_back("MET>250");
	CutList.push_back("dPhiMuMET>1");	
	CutList.push_back("MET>300");
	CutList.push_back("invM>100");
	CutList.push_back("MTsum>120");

	//ChiMass = 0;
	ChiMass = 0.;
	//cout<<" THE MASS IS ========================= "<<ChiMass<<endl;
	 int CutNumb = int(CutList.size());
         int iCFCounter[CutNumb];
	 double CFCounter[CutNumb];
	 for (int i=0;i < CutNumb; i++){
                        CFCounter[i] = 0;
			CFCounter_[i] = 0;
         	        iCFCounter[i] = 0;
        }
	fChain->GetEntry(0);  
	string old = datasetName->c_str();
	int counter = 0;
		
	bool ifCutBDT = true;
	double CutBDT = 0.236;

	//char hist_[100];
	bool isData = false;
	bool isTT = false;
	bool isDY = false;
	bool isDYee = false;
	bool isDYmm = false;
	bool isDYnunu = false;
	bool isDYhigh = false;
	bool isDYlow = false;
	bool isDYNJ = false;
	bool isZTT = false;
	bool isWNJ = false;
	bool isNJ = false;
	bool isSignal = false;
	bool cut_btag = true;
	
	bool isWith1jet=false;
	bool isWith2jet=false;
	bool isWith3jet=false;
	bool isWith4jet=false;


	bool t = true;
	bool f = false;
	bool InvertLeptonIso = LEPTONHERE;
	//bool HighInvertLeptonIso = HIGHISO;
	string Sign = "SIGNHERE";
	
	
	string systematic="Nominal";


	string cut = to_string(t);
	cout <<"  "<<cut.c_str()<<endl;
	char plots_[100];

	string data = "Single";
	string tt = "TT_TuneCUETP8M2T4_13TeV-powheg-pythia8";
	string wj = "WJetsToLNu";
	string wj1 = "W1JetsToLNu";
	string wj2 = "W2JetsToLNu";
	string wj3 = "W3JetsToLNu";
	string wj4 = "W4JetsToLNu";
	string dyj = "DYJetsToLL";
	string dyjhigh = "DYJetsToLL_M-50";
	string dyjlow = "DYJetsToLL_M-5to";
	string dyjlow2 = "DYJetsToLL_M-10to";
	string dyj1 = "DY1JetsToLL";
	string dyj2 = "DY2JetsToLL";
	string dyj3 = "DY3JetsToLL";
	string dyj4 = "DY4JetsToLL";
	string ztt = "isZTT";
	string signal = "stau";
	string signalC1 = "C1";


	bool isWJ=false;
	//bool isDY=false;


	string with1jet = "with1jet";
	string with2jet = "with2jet";
	string with3jet = "with3jet";
	string with4jet = "with4jet";
	if (string::npos != old.find(data)) isData= true;
	if (string::npos != old.find(signal)) isSignal= true;
	if (string::npos != old.find(signalC1)) isSignal= true;
	if (string::npos != old.find(tt)) isTT= true;
	if (string::npos != old.find(wj)) isWJ= true;
	if (string::npos != old.find(dyj)) isDY= true;
	if (string::npos != old.find(dyjhigh)) isDYhigh= true;
	if (string::npos != old.find(dyjlow) || string::npos != old.find(dyjlow2)) isDYlow= true;
	if (string::npos != old.find(dyj1) || string::npos != old.find(dyj2) || string::npos != old.find(dyj3) || string::npos != old.find(dyj4)) isDYNJ = true;
	if (string::npos != old.find(wj1) || string::npos != old.find(wj2) || string::npos != old.find(wj3) || string::npos != old.find(wj4)) isWNJ= true;

	isNJ = isDYNJ && isWNJ;

/*
	bool isWJ=false;
      if (  string::npos != old.find() ) isWJ=true;
		bool isDY=false;
      if (  string::npos != old.find("DY") ) isDY=true;*/

	string channel = "mutau";

	TString fileinName = "/nfs/dust/cms/user/bobovnii/HLLHC/CMSSW_8_0_25/src/DesyTauAnalyses/NTupleMaker/test/mutau/FILEIN";
	if (systematic == "JetEnUp" || systematic == "JetEnDown"  || systematic == "UnclEnDown" || systematic == "UnclEnDown" || systematic == "TauEnUp" || systematic == "TauEnDown" || systematic == "ElEnUp" || systematic == "ElEnDown" || systematic == "MuEnUp" || systematic == "MuEnDown") 
	{fileinName ="/nfs/dust/cms/user/bobovnii/HLLHC/CMSSW_8_0_25/src/DesyTauAnalyses/NTupleMaker/test/mutau_"+systematic+"/FILEIN";}


	string fileName = "FILEIN";


	TFile * filein = new TFile(fileinName,"read");

	string fln = filein->GetName();
	cout<<" ============================================ is it ZTT ???  "<<isZTT<<" old "<<fln<<endl;
	TH1D * histW = (TH1D*)filein->Get("mutau/histWeightsH");


	TFile * file = new TFile("plots.root","recreate");

	//cout<<"  "<<old<<"  "<<datasetName->c_str()<<"  "<<hist_<<"  "<<CutFlow->GetName()<<"  "<<CutFlow->GetBinContent(1)<<endl;
		
	string Channel = "mutau";
	file->mkdir(Channel.c_str());
	file->cd(Channel.c_str());
	float top_w = 1.;
	Long64_t nentries = fChain->GetEntriesFast();
	SetupHists(CutNumb);

		cout<<" will process "<<nentries<<" dataset "<<datasetName->c_str()<< endl;

	Long64_t nbytes = 0, nb = 0;


	//for (Long64_t jentry=0; jentry<1000;jentry++) {
	for (Long64_t jentry=0; jentry<nentries;jentry++) {

//cout << "start loop" << endl;
		Long64_t ientry = LoadTree(jentry);
		nb = fChain->GetEntry(jentry);   nbytes += nb;
		float all_weights = 1.;


		if (isWJ && (npartons>0)) continue;
		if (isDY && (npartons>0)) continue;

		bool isDYTauTau = false;
		bool isDYll = false;

		if ((isDY  ||  isDYNJ) && isDYTT>0.5) isDYTauTau = true;
		if ((isDY  ||  isDYNJ) && isDYEE>0.5) isDYee = true;
		if ((isDY  ||  isDYNJ) && isDYMM>0.5) isDYmm = true;
		if ((isDY  ||  isDYNJ) && isDYNuNu>0.5) isDYnunu = true;

		if ((isDY  ||  isDYNJ) && isDYTT<0.5) isDYll = true;
		float charge_ =mu_charge[muon_index]  * ta_charge[taus_index];

		//cout<<" Again ..................... "<<isZTT<<" DYTT "<<isDYTauTau<<endl;
		//if ((isDY || isDYNJ) && isZTT && !isDYTauTau) continue;
		//if ((isDY || isDYNJ) && !isZTT && !isDYll) continue;

		if ( charge_ < 0. && Sign == "SS") continue;
		if ( charge_ > 0. && Sign == "OS") continue;
		//if ( charge_ > 0.) continue;		


		if ( jentry%1000 ==0 ) cout<<" working for you...processed " <<jentry<<" events from "<<nentries<<" dataset "<<datasetName->c_str()<<" weight "<<all_weights<< endl;


		JetsMV.clear();
		MuMV.clear();
		ElMV.clear();
		TauMV.clear();
		btag_index.clear();

			JetsV.SetPxPyPzE(0.,0.,0.,0.);
			MuV.SetPxPyPzE(0.,0.,0.,0.);
			ElV.SetPxPyPzE(0.,0.,0.,0.);
			TauV.SetPxPyPzE(0.,0.,0.,0.);

	for (int nj=0;nj<njets;++nj) {
	int jet_index = jets_cleaned[nj];
	JetsV.SetPxPyPzE(0.,0.,0.,0.);
	JetsV.SetPxPyPzE(jet_px[jet_index], jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
	JetsMV.push_back(JetsV);
	}

	float met = -1;

		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met= sqrt(met_ex*met_ex + met_ey*met_ey);  


if(muon_index>-1 )			MuV.SetPtEtaPhiM(mu_pt[muon_index], mu_eta[muon_index], mu_phi[muon_index], muonMass);
if(electron_index>-1 )		ElV.SetPtEtaPhiM(el_pt[electron_index], el_eta[electron_index], el_phi[electron_index],electronMass);
if (taus_index>-1 )			TauV.SetPtEtaPhiM(ta_pt[taus_index], ta_eta[taus_index], ta_phi[taus_index], ta_mass[taus_index]);

		int iCut = 0;

		all_weights = gen_weight ;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
		

		if (mu_relIso[muon_index] > 0.5) continue;
		if (ta_pt[taus_index] < 40) continue;


		//if ( fabs(mu_dz[muon_index]) > 0.2) continue;
		//if ( fabs(mu_dxy[muon_index]) > 0.045) continue;

		if ( fabs(mu_charge[muon_index]) !=1 ) continue;
		if ( fabs(ta_charge[taus_index]) !=1 ) continue;

                double Dr=deltaR(MuV.Eta(), MuV.Phi(),
					TauV.Eta(),TauV.Phi());
		if (Dr>3.5 && !InvertLeptonIso) continue;
		if (Dr<3.5 && InvertLeptonIso) continue;

//cout << "??????????" << endl;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


//cout << "??????????" << endl;
//float TFR_weight = 0.005;
//float Teff_weight = 0.4;


//Teff_weight = 0.97*0.77*((0.32*(ta_pt[taus_index]*0 + 1) + 0.01*ta_pt[taus_index] - 0.000054*ta_pt[taus_index]*ta_pt[taus_index])*(ta_pt[taus_index]<100)+0.78*(ta_pt[taus_index]>100)); 
//TFR_weight = ((( -0.00621816*(ta_pt[taus_index]*0+1)+0.00130097*ta_pt[taus_index]-0.0000219642*ta_pt[taus_index]*ta_pt[taus_index]+0.000000149393*pow(ta_pt[taus_index],3)-0.000000000458972e*pow(ta_pt[taus_index],4)+0.000000000000527983e-13*pow(ta_pt[taus_index],5)))*(ta_pt[taus_index]<250) + 0.0032*(ta_pt[taus_index]>250)); 

		all_weights *= TFR_weight;


		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


//cout << "??????????" << endl;
		if (event_secondLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

//cout << "??????????" << endl;
		if (event_thirdLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		


		//if ( (matchedTauToPromptMu > 0.5 && matchedTauToPromptEl < 0.5) && !isData) all_weights *= tfrmu;
		//if ( (matchedTauToPromptEl > 0.5 && matchedTauToPromptMu < 0.5) && !isData) all_weights *= tfrel;



			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//cout << "??????????" << endl;
		if (nbtag!=0) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		 TLorentzVector DiL = MuV  ;
     		double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), METV.Px(),  METV.Py() );
         	double MT = 0;MT=sqrt(2*DiL.Pt()*met*(1-TMath::Cos(dPhi)));
     		double dPhiT=dPhiFrom2P( TauV.Px(), TauV.Py(), METV.Px(),  METV.Py() );
         	double MTt = 0;MTt=sqrt(2*TauV.Pt()*met*(1-TMath::Cos(dPhiT)));
		double MTsum = MT+MTt;
	     	
		if (MT > 60. && MT < 120. ) continue;
		//if (MT < 20.) continue;

//cout << "??????????" << endl;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		



//cout << "??????????" << endl;
           
		if (met<250.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


//cout << "??????????" << endl;
           
		if (dPhi<1.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;



//cout << "??????????" << endl;
		if (met<300.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

//cout << "??????????" << endl;
		 TLorentzVector DiLL = MuV + TauV ;
		if ( DiLL.M() < 100. ) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
	
		
	
	
  }


	float Lumi = 36590.;

	if (isData) Lumi = 1.;
		 for(int ci = 0; ci < CutNumb; ci++)
                        {
                                // tfile << CutList[ci]<<"\t & \t"
                                //          << CFCounter[ci]  <<"\t & \t"<< statUnc[ci] <<"\t & \t"<< iCFCounter[ci] << endl;
                                		CutFlowUnW->SetBinContent(1+ci,0);
                        if (CutNumb < 2)       CutFlowUnW->SetBinContent(1+ci,CFCounter_[ci]);
                           else  
 					CutFlowUnW->SetBinContent(1+ci,float(CFCounter[ci]) );
				

					cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<endl;			

}

			cout<<"  end from TH1D "<<endl;

		CutFlowUnW->Write();
		histW->Write();
		file->Write();
		file->Close();
		cout<<" Failed events  "<<counter<<endl;
	}
/////////////////////////////////////////////

